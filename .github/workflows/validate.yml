name: Validate SPID Metadata
on:
  push:
    paths:
      - "metadata/**.xml"
  pull_request:
    paths:
      - "metadata/**.xml"
permissions:
  contents: write   # ‚úÖ necessario per push su gh-pages
jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          pip install lxml xmlsec cryptography
      - name: Run metadata validation
        continue-on-error: true  # ‚úÖ Non blocca il workflow anche se fallisce
        run: |
          mkdir -p validated reports
          echo "=== Validation Report ===" > reports/report.log
          echo "Generated at: $(date)" >> reports/report.log
          echo "" >> reports/report.log
          
          TOTAL_FILES=0
          VALID_FILES=0
          INVALID_FILES=0
          
          for f in metadata/*.xml; do
            if [ ! -f "$f" ]; then
              echo "No XML files found in metadata directory" >> reports/report.log
              break
            fi
            
            TOTAL_FILES=$((TOTAL_FILES + 1))
            echo "üîé Validating $f"
            echo "--- Validating $(basename $f) ---" >> reports/report.log
            
            if python scripts/validate_metadata_qad.py "$f" >> reports/report.log 2>&1; then
              echo "‚úÖ $f is valid"
              echo "‚úÖ $(basename $f): VALID" >> reports/report.log
              cp "$f" validated/ || echo "Failed to copy $f"
              VALID_FILES=$((VALID_FILES + 1))
            else
              echo "‚ùå $f has errors"
              echo "‚ùå $(basename $f): INVALID" >> reports/report.log
              INVALID_FILES=$((INVALID_FILES + 1))
            fi
            echo "" >> reports/report.log
          done
          
          # Aggiungi summary al report
          echo "=== SUMMARY ===" >> reports/report.log
          echo "Total files: $TOTAL_FILES" >> reports/report.log
          echo "Valid files: $VALID_FILES" >> reports/report.log
          echo "Invalid files: $INVALID_FILES" >> reports/report.log
          
          # Salva le statistiche per gli step successivi
          echo "TOTAL_FILES=$TOTAL_FILES" >> $GITHUB_ENV
          echo "VALID_FILES=$VALID_FILES" >> $GITHUB_ENV
          echo "INVALID_FILES=$INVALID_FILES" >> $GITHUB_ENV

  generate_report:
    runs-on: ubuntu-latest
    needs: validate
    if: always()  # ‚úÖ Esegue SEMPRE, anche se validate fallisce
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Download artifacts from validation
        run: |
          # Ricrea le directory anche se validate √® fallito
          mkdir -p validated reports
          
          # Se validate √® fallito, crea un report di base
          if [ ! -f reports/report.log ]; then
            echo "=== Validation Report ===" > reports/report.log
            echo "Generated at: $(date)" >> reports/report.log
            echo "‚ùå Validation step failed or was skipped" >> reports/report.log
            echo "" >> reports/report.log
            
            # Prova comunque a validare i file per il report
            if ls metadata/*.xml 1> /dev/null 2>&1; then
              pip install lxml xmlsec cryptography
              for f in metadata/*.xml; do
                echo "--- Validating $(basename $f) ---" >> reports/report.log
                if python scripts/validate_metadata_qad.py "$f" >> reports/report.log 2>&1; then
                  echo "‚úÖ $(basename $f): VALID" >> reports/report.log
                  cp "$f" validated/ 2>/dev/null || true
                else
                  echo "‚ùå $(basename $f): INVALID" >> reports/report.log
                fi
                echo "" >> reports/report.log
              done
            else
              echo "No XML files found in metadata directory" >> reports/report.log
            fi
          fi
          
      - name: Generate index.html
        if: always()
        run: |
          cat > gh-pages_index.html <<'EOF'
          <!DOCTYPE html>
          <html lang="it">
          <head>
            <meta charset="UTF-8">
            <title>Registro SPID - Metadata Validati</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 2em; background: #f9f9f9; }
              h1 { color: #2c3e50; }
              .status { padding: 10px; border-radius: 5px; margin: 1em 0; }
              .success { background: #d4edda; border: 1px solid #c3e6cb; color: #155724; }
              .warning { background: #fff3cd; border: 1px solid #ffeaa7; color: #856404; }
              .error { background: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; }
              table { border-collapse: collapse; width: 100%; margin-top: 1em; }
              th, td { padding: 8px 12px; border: 1px solid #ccc; }
              th { background: #34495e; color: #fff; text-align: left; }
              tr:nth-child(even) { background: #ecf0f1; }
              .footer { margin-top: 2em; font-size: 0.9em; color: #777; }
            </style>
          </head>
          <body>
            <h1>Registro SPID - Metadata Validati</h1>
          EOF
          
          # Aggiungi status basato sui file validati
          if [ "$(ls -A validated/ 2>/dev/null)" ]; then
            VALID_COUNT=$(ls validated/*.xml 2>/dev/null | wc -l)
            echo "<div class=\"status success\">‚úÖ $VALID_COUNT metadata validati con successo</div>" >> gh-pages_index.html
          else
            echo "<div class=\"status error\">‚ùå Nessun metadata validato</div>" >> gh-pages_index.html
          fi
          
          cat >> gh-pages_index.html <<'EOF'
            <p>Questa pagina elenca i metadata validati e pubblicati automaticamente tramite pipeline CI/CD.</p>
            <h2>Metadata disponibili</h2>
            <table>
              <thead>
                <tr>
                  <th>Nome file</th>
                  <th>Ultimo aggiornamento</th>
                  <th>Stato</th>
                </tr>
              </thead>
              <tbody>
          EOF
          
          if [ "$(ls -A validated/ 2>/dev/null)" ]; then
            for f in validated/*.xml; do
              DATE=$(date +"%Y-%m-%d")
              echo "<tr><td><a href=\"$(basename $f)\">$(basename $f)</a></td><td>$DATE</td><td>‚úÖ Valid</td></tr>" >> gh-pages_index.html
            done
          else
            echo "<tr><td colspan=\"3\">Nessun metadata validato disponibile</td></tr>" >> gh-pages_index.html
          fi
          
          cat >> gh-pages_index.html <<'EOF'
              </tbody>
            </table>
            <h2>Report di validazione</h2>
            <p><a href="report.log">üìÑ Scarica il report completo</a></p>
            <div class="footer">
              Generato automaticamente dal workflow GitHub Actions ‚Üí
              <code>gh-pages</code><br>
              Last update: 
          EOF
          echo "$(date)" >> gh-pages_index.html
          echo "            </div>" >> gh-pages_index.html
          echo "          </body>" >> gh-pages_index.html
          echo "          </html>" >> gh-pages_index.html

      - name: Prepare GitHub Pages content
        if: always()
        run: |
          # Crea una directory pulita per GitHub Pages
          mkdir -p gh-pages-deploy
          cd gh-pages-deploy
          
          # Crea .nojekyll per disabilitare Jekyll
          touch .nojekyll
          
          # Copia i file validati (se esistono)
          if [ "$(ls -A ../validated/ 2>/dev/null)" ]; then
            cp -r ../validated/* . || true
          fi
          
          # Copia sempre il report e l'index
          cp ../reports/report.log . || echo "Missing report, creating placeholder" > report.log
          cp ../gh-pages_index.html index.html
          
          # Crea un README semplice
          cat > README.md <<'EOF'
          # SPID Metadata Registry
          
          Questo repository contiene i metadata SPID validati automaticamente.
          
          - [Visualizza il registry](index.html)
          - [Report di validazione](report.log)
          
          Aggiornato automaticamente via GitHub Actions.
          EOF

      - name: Deploy to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages-deploy
          force_orphan: true
          enable_jekyll: false
          cname: false
